#include "WindowButtonsWidget.h"

unsigned char btnExitImage[139] = {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x12, 0x08, 0x06, 0x00, 0x00, 0x00, 0x56, 0xCE, 0x8E,
	0x57, 0x00, 0x00, 0x00, 0x52, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F,
	0x03, 0x35, 0x00, 0xE3, 0xA8, 0x41, 0x04, 0x01, 0x13, 0x0E, 0xF1, 0x9B, 0x40, 0x8C, 0xCB, 0x86,
	0xFF, 0x50, 0x79, 0xA2, 0x5C, 0x84, 0x2C, 0xC8, 0x48, 0x84, 0x38, 0x5E, 0xAF, 0xA1, 0x6B, 0xC2,
	0x69, 0x08, 0x31, 0x61, 0x84, 0x4D, 0x92, 0x91, 0xDC, 0xC0, 0xFE, 0x4F, 0xC8, 0x10, 0xBA, 0xB9,
	0x88, 0x2A, 0x61, 0x44, 0x72, 0xAC, 0xE1, 0x4B, 0x47, 0xD8, 0x6C, 0x66, 0x44, 0x93, 0x1F, 0xCD,
	0xB4, 0x24, 0x00, 0x80, 0x00, 0x03, 0x00, 0x3D, 0x78, 0x40, 0x49, 0x56, 0x0F, 0xAD, 0x40, 0x00,
	0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
};

unsigned char btnMaximizeImage[103] = {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x12, 0x08, 0x06, 0x00, 0x00, 0x00, 0x56, 0xCE, 0x8E,
	0x57, 0x00, 0x00, 0x00, 0x2E, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F,
	0x03, 0x35, 0x00, 0xE3, 0xA8, 0x41, 0x64, 0x19, 0x44, 0x8A, 0xC9, 0x8C, 0x74, 0x35, 0x88, 0x11,
	0x8F, 0x01, 0xFF, 0x47, 0x0D, 0xA2, 0xAE, 0x41, 0x83, 0x27, 0xFA, 0x47, 0x33, 0x2D, 0x2A, 0x00,
	0x08, 0x30, 0x00, 0xAC, 0x85, 0x43, 0xDD, 0x77, 0xD7, 0xEC, 0x81, 0x00, 0x00, 0x00, 0x00, 0x49,
	0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
};

unsigned char btnMinimizeImage[173] = {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x12, 0x08, 0x06, 0x00, 0x00, 0x00, 0x56, 0xCE, 0x8E,
	0x57, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B,
	0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00,
	0x7A, 0x25, 0x00, 0x00, 0x80, 0x83, 0x00, 0x00, 0xF9, 0xFF, 0x00, 0x00, 0x80, 0xE9, 0x00, 0x00,
	0x75, 0x30, 0x00, 0x00, 0xEA, 0x60, 0x00, 0x00, 0x3A, 0x98, 0x00, 0x00, 0x17, 0x6F, 0x92, 0x5F,
	0xC5, 0x46, 0x00, 0x00, 0x00, 0x33, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF,
	0x3F, 0x03, 0x35, 0x00, 0xE3, 0xA8, 0x41, 0xA3, 0x06, 0x8D, 0x1A, 0x44, 0x8A, 0x41, 0xDF, 0x18,
	0x18, 0x18, 0x38, 0x89, 0xD4, 0xFB, 0x9D, 0x81, 0x81, 0x81, 0x8B, 0xE6, 0x06, 0x8D, 0xC6, 0x1A,
	0x26, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x36, 0xF1, 0x39, 0xDD, 0xFE, 0xE6, 0x00,
	0xC9, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
};

unsigned char btnRestoreImage[113] = {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x12, 0x08, 0x06, 0x00, 0x00, 0x00, 0x56, 0xCE, 0x8E,
	0x57, 0x00, 0x00, 0x00, 0x38, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F,
	0x03, 0x35, 0x00, 0xE3, 0xC8, 0x35, 0x88, 0x18, 0x5B, 0x18, 0xA9, 0xE1, 0xA2, 0xFF, 0xF8, 0x0C,
	0x22, 0xD6, 0x64, 0x46, 0xBA, 0x1B, 0xC4, 0x48, 0x20, 0xDC, 0x86, 0xB9, 0x41, 0x78, 0xD3, 0x11,
	0x29, 0x81, 0x4D, 0x1F, 0x83, 0x46, 0x73, 0x3F, 0x2A, 0x00, 0x08, 0x30, 0x00, 0x86, 0x3B, 0x48,
	0xDD, 0x73, 0xF9, 0xD5, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60,
	0x82
};

WindowButtonsWidget::WindowButtonsWidget( QWidget* parent ) : QWidget( parent )
{
	layout = new QHBoxLayout( this );
	layout->setContentsMargins( QMargins( 0, 0, 0, 0 ) );
	layout->setSpacing( 7 );
	iconPosition = QPoint( 0, 0 );
	state = Normal;

	minimizeButton = new QWidget( this );
	minimizeButton->installEventFilter( this );
	layout->addWidget( minimizeButton );

	maximizeButton = new QWidget( this );
	maximizeButton->installEventFilter( this );
	layout->addWidget( maximizeButton );

	closeButton = new QWidget( this );
	closeButton->installEventFilter( this );
	layout->addWidget( closeButton );

    minimizeIconImage = QImage::fromData( btnMinimizeImage, sizeof( btnMinimizeImage ) / sizeof( *btnMinimizeImage ), "png" );
    maximizeIconImage = QImage::fromData( btnMaximizeImage, sizeof( btnMaximizeImage ) / sizeof( *btnMaximizeImage ), "png" );
    restoreIconImage = QImage::fromData( btnRestoreImage, sizeof( btnRestoreImage ) / sizeof( *btnRestoreImage ), "png" );
    closeIconImage = QImage::fromData( btnExitImage, sizeof( btnExitImage ) / sizeof( *btnExitImage ), "png" );

	setButtonColor( ButtonType::Minimize | ButtonType::Maximize | ButtonType::Close, palette().windowText().color() );
	setButtons( ButtonType::Minimize | ButtonType::Maximize | ButtonType::Close );
}


WindowButtonsWidget::~WindowButtonsWidget()
{
	delete layout;
}

void WindowButtonsWidget::setButtonColor( int type, QColor color )
{
	if( type & ButtonType::Minimize )
	{
		for( int x = 0; x < minimizeIconImage.width(); x++ )
		{
			for( int y = 0; y < minimizeIconImage.height(); y++ )
			{
				QColor c = color;
				c.setAlpha( qAlpha( minimizeIconImage.pixel( x, y ) ) );
				minimizeIconImage.setPixel( x, y, c.rgba() );
			}
		}
	}
	if( type & ButtonType::Maximize )
	{
		for( int x = 0; x < maximizeIconImage.width(); x++ )
		{
			for( int y = 0; y < maximizeIconImage.height(); y++ )
			{
				QColor c = color;
				c.setAlpha( qAlpha( maximizeIconImage.pixel( x, y ) ) );
				maximizeIconImage.setPixel( x, y, c.rgba() );
			}
		}

		for( int x = 0; x < restoreIconImage.width(); x++ )
		{
			for( int y = 0; y < restoreIconImage.height(); y++ )
			{
				QColor c = color;
				c.setAlpha( qAlpha( restoreIconImage.pixel( x, y ) ) );
				restoreIconImage.setPixel( x, y, c.rgba() );
			}
		}
	}
	if( type & ButtonType::Close )
	{
		for( int x = 0; x < closeIconImage.width(); x++ )
		{
			for( int y = 0; y < closeIconImage.height(); y++ )
			{
				QColor c = color;
				c.setAlpha( qAlpha( closeIconImage.pixel( x, y ) ) );
				closeIconImage.setPixel( x, y, c.rgba() );
			}
		}
	}
}

void WindowButtonsWidget::setMaximizeButtonState( WindowState state )
{
	this->state = state;
	update();
}

bool WindowButtonsWidget::eventFilter( QObject* watched, QEvent* e )
{
	if( e->type() == QEvent::Paint )
	{
		QPainter painter( static_cast< QWidget * >( watched ) );
		if( watched == minimizeButton )
			painter.drawImage( iconPosition, minimizeIconImage );
		else if( watched == maximizeButton && state == Normal )
			painter.drawImage( iconPosition, maximizeIconImage );
		else if( watched == maximizeButton && state == Maximized )
			painter.drawImage( iconPosition, restoreIconImage );
		else if( watched == closeButton )
			painter.drawImage( iconPosition, closeIconImage );

		return true;
	}
	else if( e->type() == QEvent::MouseButtonPress && ( ( QMouseEvent* ) e )->button() == Qt::MouseButton::LeftButton )
	{ 
		if( static_cast< QWidget * >( watched )->rect().contains( static_cast< QMouseEvent* >( e )->pos() ) )
		{
			iconPosition = QPoint( 1, 1 );
			static_cast< QWidget * >( watched )->update();
		}		
		return true;
	}
	else if( e->type() == QEvent::MouseButtonRelease && ( ( QMouseEvent* ) e )->button() == Qt::MouseButton::LeftButton )
	{
		if( !static_cast< QWidget * >( watched )->rect().contains( static_cast< QMouseEvent* >( e )->pos() ) )
		{
			iconPosition = QPoint( 0, 0 );
			update();
			return false;
		}

		if( watched == minimizeButton )
			minimizeButtonClicked();
		else if( watched == maximizeButton )
		{
			state == Normal ? state = Maximized : state = Normal;
			maximizeButtonClicked( state );
		}
		else if( watched == closeButton )
			closeButtonClicked();

		iconPosition = QPoint( 0, 0 );
		update();
		return true;
	}
	return false;
}

void WindowButtonsWidget::timerEvent( QTimerEvent* )
{
	
}

void WindowButtonsWidget::setButtons( int type )
{
	int width = 0;
	minimizeButton->hide();
	maximizeButton->hide();
	closeButton->hide();

	if( type & ButtonType::Minimize )
	{
		minimizeButton->show();
		width += 18;
	}
	if( type & ButtonType::Maximize )
	{
		maximizeButton->show();
		state = Normal;
		width ? width += 25 : width += 18;
	}
	if( type & ButtonType::Close )
	{
		closeButton->show();
		width ? width += 25 : width += 18;
	}

	setFixedSize( width, 18 );
}
